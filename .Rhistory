filter(gender=='M') %>%
select(gender, ideology)
ces %>%
filter(gender=='M') %>%
ggplot(., ideology)
ces %>%
filter(gender=='M') %>%
ggplot(., ideology)+geom_bar()
ces %>%
filter(gender=='M') %>%
ggplot(., x=ideology)+geom_bar()
ces %>%
filter(gender=='M') %>%
ggplot(., aes(x=ideology))+geom_bar()
ces %>%
filter(gender=='M') %>%
select(ideology) %>%
ggplot(., aes(x=ideology))+geom_bar()
?tidyverse
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message=F, warning=F, fig.align='center')
# Chunk 2
print('Hello world')
# Chunk 3
abc<-print('Hello world')
# Chunk 4
abc
# Chunk 6
library(tidyverse)
# Chunk 7
library(haven)
# Chunk 8: numeric
num<-1
# Chunk 9: character
char<-'1'
# Chunk 10: num-char
num
char
# Chunk 11: check-class
class(num)
class(char)
# Chunk 12: make-vectors
gender<-c(0,1,0)
age<-c(18,22,33)
lucky<-c(1,2,3)
# Chunk 13
matrix1<-matrix(c(age, gender, lucky), nrow=3, ncol=3)
# Chunk 14: make-data-frame
df<-data.frame(age=age, gender=gender, lucky=lucky)
# Chunk 15: access-individual-variables
df$age
df$gender
# Chunk 16: summary-commands
#summarize the first few rows of a data frame
head(df)
#Examine the structure of a data frame
str(df)
#Summary statistics of a data frame.
summary(df)
#Access one variable of a data frame
df$age
# Chunk 17: individual-variables
#Check class of each variable
class(df$age)
class(df$gender)
class(df$lucky)
# Chunk 18: load-car
library(car)
# Chunk 19
recode(df$gender, "0='male' ; 1='female'", as.factor=T)
# Chunk 20
df$gender2<-recode(df$gender,
"0='male' ; 1='female'",
as.factor=T)
# Chunk 21
levels(df$gender2)
# Chunk 22
list1<-list(age, gender,lucky)
# Chunk 23
#print the numeric variable num as a character
as.character(num)
#print the character variable char as a number
as.numeric(char)
#Convert both to a factor (categorical variable)
as.factor(num)
as.factor(char)
# Chunk 24
#Addition
x<-1+2
x
y<-2+1
#Division
x/y
#Multiplication
x*y
#Exponentiation
x^2
#Square Root
sqrt(9)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message=F, warning=F, fig.align='center')
# Chunk 2
print('Hello world')
# Chunk 3
abc<-print('Hello world')
# Chunk 4
abc
# Chunk 6
library(tidyverse)
# Chunk 7
library(haven)
# Chunk 8: numeric
num<-1
# Chunk 9: character
char<-'1'
# Chunk 10: num-char
num
char
# Chunk 11: check-class
class(num)
class(char)
# Chunk 12: make-vectors
gender<-c(0,1,0)
age<-c(18,22,33)
lucky<-c(1,2,3)
# Chunk 13
matrix1<-matrix(c(age, gender, lucky), nrow=3, ncol=3)
# Chunk 14: make-data-frame
df<-data.frame(age=age, gender=gender, lucky=lucky)
# Chunk 15: access-individual-variables
df$age
df$gender
# Chunk 16: summary-commands
#summarize the first few rows of a data frame
head(df)
#Examine the structure of a data frame
str(df)
#Summary statistics of a data frame.
summary(df)
#Access one variable of a data frame
df$age
# Chunk 17: individual-variables
#Check class of each variable
class(df$age)
class(df$gender)
class(df$lucky)
# Chunk 18: load-car
library(car)
# Chunk 19
recode(df$gender, "0='male' ; 1='female'", as.factor=T)
# Chunk 20
df$gender2<-recode(df$gender,
"0='male' ; 1='female'",
as.factor=T)
# Chunk 21
levels(df$gender2)
# Chunk 22
list1<-list(age, gender,lucky)
# Chunk 23
#print the numeric variable num as a character
as.character(num)
#print the character variable char as a number
as.numeric(char)
#Convert both to a factor (categorical variable)
as.factor(num)
as.factor(char)
# Chunk 24
#Addition
x<-1+2
x
y<-2+1
#Division
x/y
#Multiplication
x*y
#Exponentiation
x^2
#Square Root
sqrt(9)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message=F, warning=F, fig.align='center')
# Chunk 2
print('Hello world')
# Chunk 3
abc<-print('Hello world')
# Chunk 4
abc
# Chunk 6
library(tidyverse)
# Chunk 7
library(haven)
# Chunk 8: numeric
num<-1
# Chunk 9: character
char<-'1'
# Chunk 10: num-char
num
char
# Chunk 11: check-class
class(num)
class(char)
# Chunk 12: make-vectors
gender<-c(0,1,0)
age<-c(18,22,33)
lucky<-c(1,2,3)
# Chunk 13
matrix1<-matrix(c(age, gender, lucky), nrow=3, ncol=3)
# Chunk 14: make-data-frame
df<-data.frame(age=age, gender=gender, lucky=lucky)
# Chunk 15: access-individual-variables
df$age
df$gender
# Chunk 16: summary-commands
#summarize the first few rows of a data frame
head(df)
#Examine the structure of a data frame
str(df)
#Summary statistics of a data frame.
summary(df)
#Access one variable of a data frame
df$age
# Chunk 17: individual-variables
#Check class of each variable
class(df$age)
class(df$gender)
class(df$lucky)
# Chunk 18: load-car
library(car)
# Chunk 19
Recode(df$gender, "0='male' ; 1='female'", as.factor=T)
# Chunk 20
df$gender2<-Recode(df$gender,
"0='male' ; 1='female'",
as.factor=T)
# Chunk 21
levels(df$gender2)
# Chunk 22
list1<-list(age, gender,lucky)
# Chunk 23
#print the numeric variable num as a character
as.character(num)
#print the character variable char as a number
as.numeric(char)
#Convert both to a factor (categorical variable)
as.factor(num)
as.factor(char)
# Chunk 24
#Addition
x<-1+2
x
y<-2+1
#Division
x/y
#Multiplication
x*y
#Exponentiation
x^2
#Square Root
sqrt(9)
# Chunk 25
# Chunk 27
matrix(c(age, gender, lucky), nrow=3, ncol=3)
mean(age)
#Calculate mean
mean(age)
#get the maximum values
max(age)
ces %>%
group_by(gender) %>%
summarize(
mean(gender)
)
ces %>%
group_by(gender) %>%
summarize(
mean(gender, na.rm=T)
)
ces %>%
group_by(gender) %>%
summarize(
mean(avg=gender, na.rm=T)
)
ces %>%
group_by(gender) %>%
summarize(avg=mean(gender, na.rm=T)
)
ces %>%
group_by(gender) %>%
summarize(avg=mean(ideology, na.rm=T)
)
ces %>%
group_by(gender) %>%
summarize(mean(ideology, na.rm=T)
)
names(ces)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning=F, message=F, include=F, results='hide')
# Chunk 2
#ces<-rio::import('https://github.com/sjkiss/LSIRM_2018/blob/master/data/ces_data.sav?raw=true')
library(haven)
library(labelled)
ces<-read_sav('data/ces15_data.sav')
# Chunk 3
#Different ways of summarizing the data set
#Check the first few rows
head(ces)
#The last few rows
tail(ces)
#Check the structure of the object
str(ces)
#Summarize the data set
summary(ces)
#See the variables names
names(ces)
# Chunk 4: get-labels
var_label(ces)
val_labels(ces)
# Chunk 5: assignment-2-solution
vars<-var_label(ces)
vals<-val_labels(ces)
# Chunk 6: assignment-3-solution
vals
# Chunk 8
#load the car library
library(car)
#Recode 1
test<-car::Recode(as.numeric(ces$p_incineq),"3:1000=NA", as.numeric=T)
#Recode 2
test2<-Recode(as.numeric(ces$p_incineq), "3=NA; 4=NA; 998=NA; 1000=NA", as.numeric=T)
#Summary test
summary(test)
#summary test 2
summary(test2)
# Chunk 9
ces$inequal<-Recode(as.numeric(ces$p_incineq), "3:1000=NA")
str(ces)
# Chunk 10: assignment-4-solution
#detach('package:dplyr')
ces$education<-Recode(as.numeric(ces$education), "12:1000=NA")
vals
ces$p_votechce<-Recode(as.numeric(ces$p_votechce), "8:1000=NA")
vals
ces$pers_ret<-Recode(as.numeric(ces$pers_ret), "4:1000=NA")
vals
ces$pers_fdpol<-Recode(as.numeric(ces$pers_fdpol), "4:1000=NA")
ces$p_gap<-Recode(as.numeric(ces$p_gap), "6:1000=NA")
ces$sex_r<-Recode(as.numeric(ces$sex_r), "3:1000=NA")
ces$income<-Recode(as.numeric(ces$income_full), "6:1000=NA")
str(ces)
# Chunk 11: summary-ces
summary(ces)
# Chunk 12: assignment-solution-5
#Recode p_selfplace
ces$ideology<-Recode(as.numeric(ces$p_selfplace), "1000=NA")
str(ces)
# Chunk 13
library(psych)
desc<-describe(ces)
# Chunk 14: load-tidyverse
library(tidyverse)
library(ggplot2)
library(dplyr)
# Chunk 15
ggplot(ces, aes(x=income))
# Chunk 16: income-bar
#Add barplot
ggplot(ces, aes(x=income))+
geom_bar()
# Chunk 17: assignment-6-solution
plot1<-  ggplot(ces, aes(x=ideology))+geom_density()
# Chunk 18: show-aesthetics
plot1+geom_density(col='red')
plot1+geom_density(size=3)
# Chunk 19: linetype-aes
plot1+geom_density(linetype=3)
# Chunk 20
ggplot(ces, aes(x=income, y=ideology))+
geom_point()
# Chunk 21: assignment-solution-7
#Scatterplot
plot2<-ggplot(ces, aes(x=education, y=ideology))+geom_point()
plot2
#Boxplot
plot3<-ggplot(ces, aes(x=as.factor(education) ,y=ideology))+geom_boxplot()
plot3
# Chunk 22: check-variables
#Check sex
ces$sex_r
#Check the value labels of sex
vals$sex_r
# Chunk 23: Recode-gender-factor
#recode sex into gender
ces$gender<-car::Recode(ces$sex_r, "1='M' ; 2='F'", levels=c('M', 'F'), as.factor=T)
# Chunk 24
#Make plot 4, save as plot4
plot4<-ggplot(ces, aes(x=income, y=ideology, group=gender))+geom_point(aes(col=gender))
#Print plot4
plot4
# Chunk 25: assignment-8-solution
plot4a<-ggplot(ces, aes(x=income, y=ideology, group=gender))+geom_point(aes(shape=gender))
plot4a
# Chunk 26: plot4b
plot4b<-plot4+geom_jitter(aes(col=gender))
plot4b
# Chunk 27
plot4b<-plot4+geom_smooth(method='lm', aes(col=gender))
plot4b
# Chunk 28: assignment-9-solution
#Check value labels
vals
#Recode eduation to degree
ces$degree<-car::Recode(ces$education, "1:7='No degree' ; 8:11='Degree'", levels=c('No degree', 'Degree'))
plot5<-ggplot(ces, aes(x=income, y=ideology))+geom_point(aes(col=degree))+geom_smooth(aes(col=degree), method='lm')
plot5
# Chunk 29
plot5+labs(x='Income', y='Ideology', title='Ideology on Income, CES 2015')
# Chunk 30: correlation
names(ces)
str(ces)
cor(ces$ideology, ces$income, use='complete.obs')
# Chunk 31
table(ces$gender, ces$inequal)
# Chunk 32: assignment-10-solution
ces$inequal
#Check values
vals
ces$inequal_cat<-Recode(ces$inequal, "1='Yes' ; 2='No'", as.factor=T)
#Crosstab
tab2<-table(ces$gender, ces$inequal_cat)
# Chunk 33: chi-sq-prop-table
#Chi-sq.test
chisq.test(tab2)
#For prop.table you can produce either row (1) or column (2) percentgates
#Compare
prop.table(tab2, 1)
#With
prop.table(tab2, 2)
# Chunk 34
library(cowplot)
plot_grid(plot1, plot2, plot3, plot4)
# Chunk 35: lm-model1
#Fit linear model
mod1<-lm(ideology ~ income, data=ces)
names(ces)
summary(inequal)
ces$inequal
names(ces)
summary(ces$p_gap)
mod2<-lm(ideology~income+education, data=ces)
mod3<-lm(ideology~income+education+income:education)
mod3<-lm(ideology~income+education+income:education, data=ces)
summary(mod1)
summary(mod2)
summary(mod3)
names(ces)
ces$inequal
names(ces)
ces$incineq
ces$p_incineq
names(ces)
ces$p_gap
ces %>%
ggplot(., p_incineq)+geom_histogram()
ces %>%
ggplot(., aes(p_incineq))+geom_histogram()
ces %>%
ggplot(., aes(p_gap))+geom_histogram()
ces$p_gap
vals$p_gap
ces %>%
ggplot(., aes(ideology, p_gap))+geom_point()+geom_smooth(method='loess')
?update
mod3a<-update(model2, .~.+income:education, data=ces)
mod3a<-update(mod2, .~.+income:education, data=ces)
summary(mod3a)
#Compare
summary(mod3, mod3a)
m1<-lm(p_gap~income, data=ces)
m2<-update(m1, .~+ideology, data=ces)
m3<-update(m2, .~+education, data=ces)
m4<-update(m3, .~+gender, data=ces)
m5<-update(m1, .~.+ideology+education+gender, data=ces)
m6<-update(m5, .~.gender:income+gender:ideology+gender:education, data=ces)
m6<-update(m5, .~.+gender:income+gender:ideology+gender:education, data=ces)
summary(m1)
#load library
library(stargazer)
stargazer(m1, m2, m3, m4, m5, m6, type='text')
stargazer(m1, m2, m3, m4, m5, m6, type='html', out='model_results.html')
summary(m5)
#update m5
m7<-update(m5, .~.+ideology:gender, data=ces)
#update m5
m7<-update(m5, .~.+ideology:gender, data=ces)
summary(m7)
install.packages('ggeffects')
library(ggeffects)
library(ggeffects)
ggpredict(m7, terms=c('gender', 'ideology'))
ggpredict(m7, terms=c('gender', 'ideology[0,5,10]'))
ggpredict(m7, terms=c('gender', 'ideology [1,5,10]'))
out<-ggpredict(m7, terms=c('gender', 'ideology [1,5,10]'))
ggplot(out, aes(x, predicted, color=group))+geom_point()
out<-ggpredict(m7, terms=c('ideology [1,5,10]', 'gender'))
ggplot(out, aes(x, predicted, color=group))+geom_point()
ggplot(out, aes(x, predicted, color=group))+geom_point()+geom_line()
ggpredict(my, terms=c('ideology'))
ggpredict(m7, terms=c('ideology'))
ggpredict(m7, terms=c('education'))
ggpredict(m7, terms=c('education', 'income'))
ggpredict(m7, terms=c('education', 'gender'))
ggpredict(m7, terms=c('education', 'income'))
